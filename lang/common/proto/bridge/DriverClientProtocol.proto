/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

syntax = "proto3";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "org.apache.reef.bridge.proto";
option java_outer_classname = "DriverClientProtocol";
option csharp_namespace = "Org.Apache.REEF.Bridge.Proto";

package driverbridge;

import "DriverCommonProtocol.proto";

// The java driver service definition.
service DriverClient {
  // Request for resources
  rpc StartHandler (StartTimeInfo) returns (Void) {}

  rpc StopHandler (StopTimeInfo) returns (Void) {}

  rpc AlarmTrigger (AlarmTriggerInfo) returns (Void) {}

  // Evaluator handlers
  rpc AllocatedEvaluatorHandler (EvaluatorInfo) returns (Void) {}

  rpc CompletedEvaluatorHandler (EvaluatorInfo) returns (Void) {}

  rpc FailedEvaluatorHandler (EvaluatorInfo) returns (Void) {}

  // Context handlers
  rpc ActiveContextHandler (ContextInfo) returns (Void) {}

  rpc ClosedContextHandler (ContextInfo) returns (Void) {}

  rpc FailedContextHandler (ContextInfo) returns (Void) {}

  rpc ContextMessageHandler (ContextMessageInfo) returns (Void) {}

  // Task handlers
  rpc RunningTaskHandler (TaskInfo) returns (Void) {}

  rpc FailedTaskHandler (TaskInfo) returns (Void) {}

  rpc CompletedTaskHandler (TaskInfo) returns (Void) {}

  rpc SuspendedTaskHandler (TaskInfo) returns (Void) {}

  rpc TaskMessageHandler (TaskMessageInfo) returns (Void) {}

  // Client Handlers
  rpc ClientMessageHandler (ClientMessageInfo) returns (Void) {}

  rpc ClientCloseHandler (Void) returns (Void) {}

  rpc ClientCloseWithMessageHandler (ClientMessageInfo) returns (Void) {}
}

// The request message containing resource request.
message StartTimeInfo {
  int64 start_time = 1;
}

message StopTimeInfo {
  int64 stop_time = 1;
}

// Information associated with an alarm that was set.
message AlarmTriggerInfo {
  string alarm_id = 1;
}

message RackDescriptorInfo {
  repeated NodeDescriptorInfo nodes = 1;
}

message NodeDescriptorInfo {
  string inet_socket_address = 1;
  RackDescriptorInfo rack_descriptor = 2;
}

message EvaluatorProcessInfo {
  repeated string command_line = 1;

  enum EvaluatorType {
    JVM = 0;
    CLR = 1;
    UNDECIDED = 2;
  }
  EvaluatorType evaluator_type = 2;

  bool is_option_set = 3;
}

message EvaluatorDescriptorInfo {
  NodeDescriptorInfo node_descriptor = 2;

  EvaluatorProcessInfo process = 3;

  // the amount of memory allocated
  int32 memory = 4;

  // the number of virtual cores allocated
  int32 cores = 5;

  // name of the runtime
  string runtime_name = 6;
}

message EvaluatorInfo {
  string evaluator_id = 1;

  EvaluatorDescriptorInfo descriptor_info = 2;
}

message ContextInfo {
  string context_id = 1;

  string evaluator_id = 2;

  string parent_id = 3;
}

message ContextMessageInfo {
  string context_id = 1;

  bytes payload = 2;

  int64 sequence_number = 3;

  string message_source_id = 4;
}

message TaskInfo {
  string task_id = 1;

  string context_id = 2;
}

message TaskMessageInfo {
  string task_id = 1;

  bytes payload = 2;

  int64 sequence_number = 3;

  string context_id = 4;

  string message_source_id = 5;
}

message ClientMessageInfo {
  bytes payload = 1;
}