// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

using System.Collections.Generic;
using System.Linq;
using System;
using Newtonsoft.Json;
using Org.Apache.REEF.Client.API.Testing;

namespace Org.Apache.REEF.Client.Local.TestRunner.FileWritingAssert
{
    internal sealed class TestResult : ITestResult, IEquatable<TestResult>
    {
        private readonly ISet<AssertResult> _results;

        public TestResult(ISet<AssertResult> results)
        {
            _results = results;
        }

        public TestResult() : this(new HashSet<AssertResult>())
        {
            // Intentionally empty
        }

        public int NumberOfFailedAsserts
        {
            get
            {
                return _results.Count(_ => _.IsFalse);
            }
        }

        public int NumberOfPassedAsserts
        {
            get
            {
                return _results.Count(_ => _.IsTrue);
            }
        }

        public bool AllTestsSucceeded
        {
            get
            {
                return NumberOfFailedAsserts == 0;
            }
        }

        private IQueryable<AssertResult> FailedAsserts
        {
            get
            {
                return _results.AsQueryable().Where(_ => _.IsFalse);
            }
        }

        private IQueryable<AssertResult> PassedAsserts
        {
            get
            {
                return _results.AsQueryable().Where(_ => _.IsTrue);
            }
        }

        public string FailedTestMessage
        {
            get { return "Failed tests: " + string.Join(";", FailedAsserts.Select(_ => _.Message)); }
        }

        /// <summary>
        /// Add a Assert result to the collection.
        /// </summary>
        /// <param name="message">The message of the assert.</param>
        /// <param name="condition">Whether or not the condition was met.</param>
        public void RecordAssertResult(string message, bool condition)
        {
            _results.Add(new AssertResult(message, condition));
        }
 
        /// <summary>
        /// Serializes the data contained in this object to JSON.
        /// </summary>
        /// <returns>A string version of this object.</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(_results);
        }

        /// <summary>
        /// Deserializes an instance from a string generated by ToJson().
        /// </summary>
        /// <param name="serializedObject"></param>
        /// <returns></returns>
        public static TestResult FromJson(string serializedObject)
        {
            ISet<AssertResult> results = JsonConvert.DeserializeObject<HashSet<AssertResult>>(serializedObject);
            return new TestResult(results);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as TestResult);
        }

        public bool Equals(TestResult other)
        {
            return other != null &&
                   EqualityComparer<ISet<AssertResult>>.Default.Equals(_results, other._results);
        }

        public override int GetHashCode()
        {
            return -3177284 + EqualityComparer<ISet<AssertResult>>.Default.GetHashCode(_results);
        }
    }
}